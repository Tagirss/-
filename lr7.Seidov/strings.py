# 1. Функция, принимающая на вход некий набор параметров (минимум 3 параметра).
# Внутри себя эта функция содержит заранее определённую строку, в которую можно подставлять значения переменных.
# Функция возвращает строку, в которую вставлены значения, такие что
# 1.1. Как минимум, одно значение - это просто строка
# 1.2. Как минимум, одно значение - это результат арифметической операции
# 1.3. Как минимум, одно значение - это результат вызова другой функции
def formatted_string(name, num1, num2):
    result = f"Hello, {name}! The sum of {num1} and {num2} is {num1 + num2}. Your lucky number is {len(name) * 7}."
    return result

# 2. Функция, которая формирует строку, состоящую из повторений комбинации других строк.
# Эта функция выводит получившуюся строку, где каждое повторение выводится на отдельной строке.
def repeat_combination(string1, string2, times):
    combined_string = string1 + string2
    repeated_string = (combined_string + "\n") * times
    return repeated_string.strip()

# 3. Функция, которая считает количество вхождений подстроки в строку без учёта регистра.
def count_substring(main_string, sub_string):
    return main_string.lower().count(sub_string.lower())

# 4. Функция, принимающая на вход строку и выводящая подстроку, содержащуюся между двумя индексами.
# Индексы ДОЛЖНЫ быть больше нуля и меньше длины строки минус 1.
# Тело функции ДОЛЖНО быть написано в одну строку.
def substring_between(string, index1, index2):
    return string[index1:index2]

# 5. Функция, принимающая на вход произвольное количество разных строк, где содержатся любые кириллические буквы, а также могут содержаться латинские буквы, но только такие, которые визуально неотличимы от кириллических. Регистр букв произвольный.
# Эта функция ищет слова, в которых содержатся латинские буквы.
# На выход возвращаются строки, где были обнаружены латинские символы и количество слов, в которых была обнаружена хотя бы одна латинская буква.
def find_latin_in_cyrillic(*strings):
    results = []
    latin_count = 0
    for string in strings:
        words = string.split()
        for word in words:
            if any('a' <= char.lower() <= 'z' for char in word):
                results.append(word)
                latin_count += 1
    return results, latin_count

# 6. Функция, определяющая, является ли строка палиндромом (одинаково читается с начала и с конца).
# Строка МОЖЕТ содержать как цифры, так и буквы.
def is_palindrome(string):
    cleaned = ''.join(filter(str.isalnum, string)).lower()
    return cleaned == cleaned[::-1]

# 7. Функция, принимающая на вход строку, содержащую несколько слов, которые разделены одним или несколькими пробелами.
# У входной строки могут быть несколько пробелов в начале и в конце.
# Функция убирает лишние пробелы: то есть все пробелы в начале и в конце строки, а между словами оставляет только один пробел.
# Функция возвращает длину строки после удаления лишних пробелов.
def trim_and_measure(string):
    return len(' '.join(string.split()))

# 8. Функция, принимающая на вход строку, содержащую текст из нескольких предложений.
# Функция заменяет символы окончания предложения на символ переноса строки.
# Функция возвращает получившуюся строку.
def replace_endings_with_newline(text):
    return text.replace('.', '.\n').replace('!', '!\n').replace('?', '?\n')

# 9. Минимум 3 функции, содержащие произвольные алгоритмы работы со строками.
# Функции ДОЛЖНЫ решать алгоритмы, отличные от реализованных в п. 1-8
def remove_digits(string):
    return ''.join(filter(lambda x: not x.isdigit(), string))

def replace_spaces(string):
    return string.replace(' ', '_')

def longest_word(string):
    words = string.split()
    return max(words, key=len) if words else None